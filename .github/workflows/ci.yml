name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-python:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./python-genia-service
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: ./python-genia-service/.venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    
    - name: Install project
      run: poetry install --no-interaction
    
    - name: Run tests
      env:
        GENIA_API_KEY: ${{ secrets.GENIA_API_KEY }}
        GENIA_API_URL: ${{ secrets.GENIA_API_URL }}
        ENVIRONMENT: testing
      run: |
        poetry run pytest tests/ -v --cov=src --cov-report=xml
    
    - name: Lint with flake8
      run: |
        poetry run flake8 src/ tests/
    
    - name: Format check with black
      run: |
        poetry run black --check src/ tests/

  test-java:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./java-api-gateway
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
    
    - name: Run tests
      run: mvn clean test
    
    - name: Build application
      run: mvn clean compile

  build-and-test:
    needs: [test-python, test-java]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create .env file
      run: |
        echo "GENIA_API_KEY=${{ secrets.GENIA_API_KEY }}" > python-genia-service/.env
        echo "GENIA_API_URL=${{ secrets.GENIA_API_URL }}" >> python-genia-service/.env
        echo "ENVIRONMENT=testing" >> python-genia-service/.env
    
    - name: Build with Docker Compose
      run: |
        docker-compose build
    
    - name: Run integration tests
      run: |
        docker-compose up -d
        sleep 30
        # Aquí puedes agregar tests de integración
        curl -f http://localhost:8080/health || exit 1
        curl -f http://localhost:8000/health || exit 1
        docker-compose down 